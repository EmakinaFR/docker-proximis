# This Makefile can be extended by another Makefile located in your project directory.

SHELL := /bin/bash
PHP_SERVICE := docker-compose exec -u www-data:www-data php sh -c

# Define a static project name that will be prepended to each service name
export COMPOSE_PROJECT_NAME := proximis_$(shell echo $${PWD\#\#*/} | tr '[:upper:]' '[:lower:]')

# Extract environment variables needed by the environment
export DOCKER_PHP_IMAGE := $(shell grep DOCKER_PHP_IMAGE ${MAKEFILE_DIRECTORY}docker/local/.env | awk -F '=' '{print $$NF}')
export PROJECT_LOCATION := $(shell echo ${MAKEFILE_DIRECTORY})

##
## ----------------------------------------------------------------------------
## Environment
## ----------------------------------------------------------------------------
##

env-backup: ## Backup the "mysql" volume
	docker run --rm \
		--volumes-from $$(docker-compose ps -q mysql) \
		--volume $$(pwd):/backup \
		busybox sh -c "tar cvf /backup/backup.tar /var/lib/mysql"

env-build: ## Build the environment
	docker-compose build --pull

env-cache: ## Flush cache in Redis
	docker-compose exec redis sh -c "redis-cli FLUSHALL"

env-logs: ## Follow logs generated by all containers
	docker-compose logs -f --tail=0

env-logs-full: ## Follow logs generated by all containers from the containers creation
	docker-compose logs -f

env-mysql: ## Open a terminal in the "mysql" container
	docker-compose exec mysql sh

env-nginx: ## Open a terminal in the "nginx" container
	docker-compose exec -u nginx:nginx nginx sh -l

env-php: ## Open a terminal in the "php" container
	docker-compose exec -u www-data:www-data php bash -l -c "source ./project.sh use && /bin/bash"

env-phpl: ## Open a terminal in the "php" container and prompt source locale
	@read -p "Enter locale: " locale; \
		docker-compose exec -u www-data:www-data php bash -l -c "source ./project.sh use $$locale && /bin/bash"

source: ## Set source with given locale
	@read -p "Enter locale: " locale; \
		source ./project.sh use $$locale

env-ps: ## List all containers managed by the environment
	docker-compose ps

env-purge: ## Purge all services and associated volumes
	docker-compose down -v
	mutagen sync terminate --label-selector='name==${COMPOSE_PROJECT_NAME}'

env-restart: env-stop env-start ## Restart the environment

env-restore: ## Restore the "mysql" volume
	docker run --rm \
		--volumes-from $$(docker-compose ps -q mysql) \
		--volume $$(pwd):/backup \
		busybox sh -c "tar xvf /backup/backup.tar var/lib/mysql/"
	docker-compose restart mysql

env-start: ## Start the environment
	@docker-compose up --detach --remove-orphans

	@if [[ ! "$$(mutagen sync list --label-selector='name==${COMPOSE_PROJECT_NAME}')" =~ "${COMPOSE_PROJECT_NAME}" ]]; then \
		mutagen sync create \
			--label=name="${COMPOSE_PROJECT_NAME}" \
			--default-owner-beta="id:1000" \
			--default-group-beta="id:1000" \
			--sync-mode="two-way-resolved" \
			--ignore-vcs --ignore=".idea" \
			"${PROJECT_LOCATION}" "docker://${COMPOSE_PROJECT_NAME}_synchro/var/www/html/"; \
	else \
    	mutagen sync resume --label-selector='name==${COMPOSE_PROJECT_NAME}'; \
    fi

env-stats: ## Print real-time statistics about containers ressources usage
	docker stats $(docker ps --format={{.Names}})

env-stop: ## Stop the environment
	@docker-compose stop
	@mutagen sync pause --label-selector='name==${COMPOSE_PROJECT_NAME}'

.PHONY: env-backup env-build env-cache env-logs env-logs env-mysql env-nginx env-php env-ps env-purge env-restart env-restore env-start env-stats env-stop

.DEFAULT_GOAL := help
help:
	@grep -E '(^[0-9a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| sed -e 's/^.*Makefile://g' \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
